#This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

# For deployment, it will be necessary to create a PyPI API token and store it as a secret
# https://docs.github.com/en/actions/reference/encrypted-secrets

name: CI/CD

on:
  release:
    types: [published]
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true


permissions:
  contents: read
  pages: write
  id-token: write

env: # Define environment variables
  AFNI_VERSION: 25.2.06
  AFNI_INSTALL_PATH: /opt/afni
  # Force tox and pytest to use color
  FORCE_COLOR: true
jobs:

  build:
    name: Build & verify package
    runs-on: ubuntu-latest
    permissions:
      attestations: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: hynek/build-and-inspect-python-package@v2
        with:
          attest-build-provenance-github: ${{ github.event_name != 'pull_request' }}

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.13']
      fail-fast: false

    steps:

    - name: Install prerequisite packages
      run: sudo apt install -y cmake

    - name: Removed unnecessary tools to free space
      run: |
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf "$AGENT_TOOLSDIRECTORY"

    - name: Create AFNI install directory
      run: |
        sudo mkdir -p ${{ env.AFNI_INSTALL_PATH }}
        sudo chown $USER ${{ env.AFNI_INSTALL_PATH }}

    - name: Cache AFNI Install
      id: cache-install
      uses: actions/cache@v4
      with:
        path: ${{ env.AFNI_INSTALL_PATH }}
        key: afni-${{ env.AFNI_VERSION }}-${{ runner.os }}

    # - name: Install AFNI Package
    #   if: steps.cache-install.outputs.cache-hit != 'true'
    #   run: |
    #     pushd ${{ env.AFNI_INSTALL_PATH }}
    #     curl -O https://afni.nimh.nih.gov/pub/dist/bin/linux_openmp64/AFNI_${{ env.AFNI_VERSION }}_Linux_openmp64.tar.gz
    #     tar -xzf AFNI_${{ env.AFNI_VERSION }}_Linux_openmp64.tar.gz
    #     rm AFNI_${{ env.AFNI_VERSION }}_Linux_openmp64.tar.gz
    #     echo "PATH=${{ env.AFNI_INSTALL_PATH }}/AFNI_${{ env.AFNI_VERSION }}_Linux_openmp64:$PATH" >> $GITHUB_ENV
    #     echo "LD_LIBRARY_PATH=${{ env.AFNI_INSTALL_PATH }}/AFNI_${{ env.AFNI_VERSION }}_Linux_openmp64/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV
    #     popd

    # # - name: Install AFNI Package
    # #   if: steps.cache-install.outputs.cache-hit != 'true'
    # #   run: |
    # #     pushd ~
    # #     curl -O https://raw.githubusercontent.com/afni/afni/master/src/other_builds/OS_notes.linux_ubuntu_24_64_a_admin.txt
    # #     curl -O https://raw.githubusercontent.com/afni/afni/master/src/other_builds/OS_notes.linux_ubuntu_24_64_b_user.tcsh
    # #     curl -O https://raw.githubusercontent.com/afni/afni/master/src/other_builds/OS_notes.linux_ubuntu_24_64_c_nice.tcsh
    # #     sudo bash OS_notes.linux_ubuntu_24_64_a_admin.txt 2>&1 | tee o.ubuntu_24_a.txt
    # #     tcsh OS_notes.linux_ubuntu_24_64_b_user.tcsh 2>&1 | tee o.ubuntu_24_b.txt
    # #     afni_system_check.py -check_all
    # #     echo "PATH=${{ env.AFNI_INSTALL_PATH }}/bin:$PATH" >> $GITHUB_ENV
    # #     echo "LD_LIBRARY_PATH=${{ env.AFNI_INSTALL_PATH }}/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV
    # #     popd

    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install the latest version of uv
      uses: astral-sh/setup-uv@v6
    - name: Install tox
      run: |
        uv tool install tox --with=tox-uv --with=tox-gh-actions
    - name: Show tox config
      run: tox c
    - name: Run tox
      run: tox -v --exit-and-dump-after 1200
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        fail_ci_if_error: true
        token: ${{ secrets.CODECOV_TOKEN }}
  
  fileformats-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.12']
    steps:
    - uses: actions/checkout@v3
    - name: Revert version to most recent tag on upstream update
      if: github.event_name == 'repository_dispatch'
      run: git checkout $(git tag -l | tail -n 1 | awk -F post '{print $1}')
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
    - name: Install task package
      run: |
        pip install "./related-packages/fileformats[test]" "./related-packages/fileformats-extras[test]"
        python -c "import fileformats.medimage_afni as m; print(f'{m.__name__} {m.__version__} @ {m.__file__}')"
    - name: Test fileformats with pytest
      run: >-
        pytest ./related-packages -sv --cov fileformats.medimage_afni
        --cov fileformats.extras.medimage_afni --cov-report xml .

  deploy-fileformats:
    needs: [build, test, fileformats-test]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive
        fetch-depth: 0 
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Install build tools
      run: python -m pip install build twine
    - name: Build source and wheel distributions
      run: python -m build ./related-packages/fileformats
    - name: Check distributions
      run: twine check ./related-packages/fileformats/dist/*
    - name: Check for PyPI token on tag
      id: deployable
      if: github.event_name == 'release'
      env:
        PYPI_API_TOKEN: "${{ secrets.PYPI_FILEFORMATS_API_TOKEN }}"
      run: if [ -n "$PYPI_API_TOKEN" ]; then echo "DEPLOY=true" >> $GITHUB_OUTPUT; fi
    - name: Upload to PyPI
      if: steps.deployable.outputs.DEPLOY
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_FILEFORMATS_API_TOKEN }}
        packages-dir: ./related-packages/fileformats/dist 

  deploy-fileformats-extras:
    needs: [deploy-fileformats]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive
        fetch-depth: 0 
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Install build tools
      run: python -m pip install build twine
    - name: Build source and wheel distributions
      run: python -m build ./related-packages/fileformats-extras
    - name: Check distributions
      run: twine check ./related-packages/fileformats-extras/dist/*
    - name: Check for PyPI token on tag
      id: deployable
      if: github.event_name == 'release'
      env:
        PYPI_API_TOKEN: "${{ secrets.PYPI_FILEFORMATS_EXTRAS_API_TOKEN }}"
      run: if [ -n "$PYPI_API_TOKEN" ]; then echo "DEPLOY=true" >> $GITHUB_OUTPUT; fi
    - name: Upload to PyPI
      if: steps.deployable.outputs.DEPLOY
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_FILEFORMATS_EXTRAS_API_TOKEN }}
        packages-dir: ./related-packages/fileformats-extras/dist 

  deploy:
    needs: [build, test]
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    permissions:
      attestations: write
      id-token: write
    steps:
    - name: Download dist
      uses: actions/download-artifact@v4
      with:
        name: Packages
        path: dist
    - name: Upload to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1

# Deploy on tags if PYPI_API_TOKEN is defined in the repository secrets.
# Secrets are not accessible in the if: condition [0], so set an output variable [1]
# [0] https://github.community/t/16928
# [1] https://docs.github.com/en/actions/reference/workflow-commands-for-github-actions#setting-an-output-parameter        